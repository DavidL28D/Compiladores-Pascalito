package tiny;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal WHILE;
terminal DO;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal Boolean BOOL;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal LTEQ;
terminal DIFF;
terminal GT;
terminal GTEQ;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal LCOR;
terminal RCOR;
terminal SEMI;
terminal MOD;
terminal AND;
terminal OR;
terminal NOT;
terminal TIPOENTERO, TIPOBOOL;
terminal FOR;
terminal TO;
terminal EACH;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase declaracion;
non terminal NodoBase for_stmt;
non terminal NodoBase while_stmt;



/* Precedencia de operadores */
precedence left MOD;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 3b"); 
					RESULT=srep;
						:}
            | for_stmt:sfor	{: if(modoDepuracion) System.out.println("\t regla 3c"); 
					RESULT=sfor;
					:}
            | while_stmt:smien {: if(modoDepuracion) System.out.println("\t regla 3d");
					RESULT=smien;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 3f"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 3g"); 
					RESULT=sesc;
            		:}
            | error	{: if(modoDepuracion) System.out.println("\t regla 3h"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            | declaracion:dec   {: if(modoDepuracion) System.out.println("\t regla 3i"); 
					RESULT=dec;
                                :}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;
while_stmt ::= WHILE exp:condicion DO stmt_seq:cuerpo END {: if(modoDepuracion) System.out.println("\t regla 6");
							RESULT = new NodoWhile(condicion,cuerpo);
							:}
		;


for_stmt ::= FOR assign_stmt:indice TO exp:condicion EACH exp:cc DO stmt_seq:cuerpo END {: if(modoDepuracion) System.out.println("\t Regla 13a");
	RESULT = new NodoFor(indice, condicion, cc,  cuerpo);
:};

assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
		;

read_stmt   ::= READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 

		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
		| simple_exp:exI DIFF simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9d"); 
					RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
					:}
		| simple_exp:exI GT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9f"); 
					RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
					:}
		| simple_exp:exI GTEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9g"); 
					RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
					:}
		| simple_exp:exI LTEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9h"); 
					RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
                                        :}
                ;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10c"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| simple_exp:exI OR term:exD     {: if(modoDepuracion) System.out.println("\t regla 10d"); 
                                                RESULT = new NodoOperacion(exI,tipoOp.or,exD);
                                            :}
        | term:ex	{: if(modoDepuracion) System.out.println("\t regla 10e"); 
						RESULT=ex;
					:}
		;

term    ::= term:exI AND factor:exD  {: if(modoDepuracion) System.out.println("\t regla 11a"); 
                                                RESULT = new NodoOperacion(exI,tipoOp.and,exD);
                                            :}
        | term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11b"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11c"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| term:exI MOD factor:exD	{: if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
							:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla 11d"); 
					RESULT=ex;
					:}
		;

factor  ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| BOOL:valor	{: if(modoDepuracion) System.out.println("\t regla 12c"); 
					System.out.println("Devolvi nodo booleano");
					if(valor!=null){
						RESULT= new NodoBool(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla 12d"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| NOT factor:exD   {: if(modoDepuracion) System.out.println("\t regla 12e"); 
                                    RESULT = new NodoOperacion(tipoOp.not,exD);
                                :}
		| error	{: if(modoDepuracion) System.out.println("\t regla 12f"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;

declaracion ::= TIPOENTERO ID:variable  {:  if(modoDepuracion) System.out.println("\t regla 13a");
				RESULT= new NodoIdentificadorInt(variable.toString());
                                        :}
                | TIPOBOOL ID:variable  {:  if(modoDepuracion) System.out.println("\t regla 13b");
				RESULT= new NodoIdentificadorBool(variable.toString());
                                        :}
                | TIPOENTERO ID:variable LCOR exp:ex RCOR {: if(modoDepuracion) System.out.println("\t regla 13c");
                                RESULT= new NodoIdentificadorInt(variable.toString(),ex);
                                        :}
                | TIPOBOOL ID:variable LCOR exp:ex RCOR {: if(modoDepuracion) System.out.println("\t regla 13d");
                                RESULT= new NodoIdentificadorBool(variable.toString(),ex);
                                        :}
                ;
